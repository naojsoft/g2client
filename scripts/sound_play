#! /usr/bin/env python3
#
"""
Gen2 observation workstation legacy sound player -- command line version

Usage:
$ sound_play --loglevel=20 --stderr --rohosts=<gen2 server host>
"""
import sys, time
import threading
from argparse import ArgumentParser

from g2base import ssdlog
from g2base.remoteObjects import remoteObjects as ro
from g2base.remoteObjects import Monitor

from g2client.soundsink import SoundSink

# Default ports
default_mon_port = 19052



def main(options, args):

    # Initialize remoteObjects subsystem
    ro_hosts = options.rohosts.split(',')
    try:
        ro.init(ro_hosts)

    except ro.remoteObjectError as e:
        logger.error(f"Error initializing remote objects subsystem: {e}")
        sys.exit(1)

    myhost = ro.get_myhost(short=False)
    basename = 'soundplay-%s' % (myhost.replace('.', '_'))
    logger = ssdlog.make_logger(basename, options)

    # channels we are interested in
    channels = ['sound']

    ev_quit = threading.Event()

    # Create a local pub sub instance
    monname = '%s.mon' % basename
    mymon = Monitor.Monitor(monname, logger,
                            numthreads=options.numthreads,
                            ev_quit=ev_quit)

    soundsink = SoundSink(monitor=mymon, logger=logger,
                          ev_quit=ev_quit)

    # Subscribe our callback functions to the local monitor
    mymon.subscribe_cb(soundsink.anon_arr, channels)
    mon_server_started = False

    # Startup monitor threadpool
    mymon.start(wait=True)
    mymon.start_server(wait=True, port=options.monport)
    mon_server_started = True

    # subscribe our monitor to the central monitor hub
    mymon.subscribe_remote(options.monitor, channels, ())

    try:
        while not ev_quit.is_set():
            time.sleep(1.0)

    except KeyboardInterrupt:
        logger.info("interrupted by keyboard!")

    except Exception as e:
        logger.info(f"error {e}", exc_info=True)

    logger.info("%s exiting..." % basename)
    if mon_server_started:
        logger.info("stopping monitor server...")
        mymon.stop_server(wait=True)

    logger.info("stopping monitor client...")
    mymon.stop(wait=True)


if __name__ == '__main__':

    argprs = ArgumentParser(description="Gen2 observation remote sound player")
    argprs.add_argument("-m", "--monitor", dest="monitor", default='monitor',
                        metavar="NAME",
                        help="Subscribe to feeds from monitor service NAME")
    argprs.add_argument("--monport", dest="monport", type=int,
                        default=default_mon_port, metavar="PORT",
                        help="Use PORT for our monitor")
    argprs.add_argument("--numthreads", dest="numthreads", type=int,
                        default=30, metavar="NUM",
                        help="Use NUM threads in thread pool")
    argprs.add_argument("--rohosts", dest="rohosts", default='localhost',
                        metavar="HOSTLIST",
                        help="Hosts to use for remote objects connection")
    ssdlog.addlogopts(argprs)

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    if len(args) != 0:
        argprs.error("incorrect number of arguments")

    main(options, args)
