#! /usr/bin/env python3
#
# soundsink -- a program to receive sound from Gen2
#
#
import sys
from argparse import ArgumentParser

from g2base import ssdlog
from g2client.soundsink import main, default_mon_port, default_svc_port


if __name__ == '__main__':

    argprs = ArgumentParser(description="Gen2 sound sink client")
    argprs.add_argument("--debug", dest="debug", default=False,
                        action="store_true",
                        help="Enter the pdb debugger on main()")
    argprs.add_argument("-c", "--channels", dest="channels", default='sound',
                        metavar="LIST",
                        help="Subscribe to the comma-separated LIST of channels")
    argprs.add_argument("--compress", dest="compress", default=False,
                        action="store_true",
                        help="Use compression on sound buffers")
    argprs.add_argument("--dst", dest="destination", default=None,
                        metavar="NAME",
                        help="Name our destination site")
    argprs.add_argument("--sink", dest="soundsink", default=False,
                        action="store_true",
                        help="Use as soundsink; i.e. play sounds locally")
    argprs.add_argument("-m", "--monitor", dest="monitor", default='monitor',
                        metavar="NAME",
                        help="Subscribe to feeds from monitor service NAME")
    argprs.add_argument("--monport", dest="monport", type=int,
                        default=default_mon_port, metavar="PORT",
                        help="Use PORT for our monitor")
    argprs.add_argument("--numthreads", dest="numthreads", type=int,
                        default=50, metavar="NUM",
                        help="Use NUM threads in our thread pool")
    argprs.add_argument("--port", dest="port", type=int,
                        default=default_svc_port, metavar="PORT",
                        help="Use PORT for our monitor")
    argprs.add_argument("--profile", dest="profile", action="store_true",
                        default=False,
                        help="Run the profiler on main()")
    argprs.add_argument("--svcname", dest="svcname", default='sound',
                        metavar="NAME",
                        help="Act as a sound distribution service with NAME")
    argprs.add_argument("--rohosts", dest="rohosts", default='localhost',
                        metavar="HOSTLIST",
                        help="Hosts to use for remote objects connection")
    ssdlog.addlogopts(argprs)

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    # Are we debugging this?
    if options.debug:
        import pdb

        pdb.run('main(options, args)')

    # Are we profiling this?
    elif options.profile:
        import profile

        print("%s profile:" % sys.argv[0])
        profile.run('main(options, args)')

    else:
        main(options, args)
