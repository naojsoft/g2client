#! /usr/bin/env python3
#
# soundsink -- a program to receive sound from Gen2
#
# eric@naoj.org
#
#
from __future__ import print_function

import sys
from optparse import OptionParser

from g2base import ssdlog
from g2client.soundsink import main, default_mon_port, default_svc_port


if __name__ == '__main__':

    usage = "usage: %prog [options]"
    optprs = OptionParser(usage=usage, version=('%%prog'))
    optprs.add_option("--debug", dest="debug", default=False,
                      action="store_true",
                      help="Enter the pdb debugger on main()")
    optprs.add_option("-c", "--channels", dest="channels", default='sound',
                      metavar="LIST",
                      help="Subscribe to the comma-separated LIST of channels")
    optprs.add_option("--compress", dest="compress", default=False,
                      action="store_true",
                      help="Use compression on sound buffers")
    optprs.add_option("--sink", dest="soundsink", default=False,
                      action="store_true",
                      help="Use as soundsink; i.e. play sounds locally")
    optprs.add_option("-m", "--monitor", dest="monitor", default='monitor',
                      metavar="NAME",
                      help="Subscribe to feeds from monitor service NAME")
    optprs.add_option("--monport", dest="monport", type="int",
                      default=default_mon_port, metavar="PORT",
                      help="Use PORT for our monitor")
    optprs.add_option("--numthreads", dest="numthreads", type="int",
                      default=50, metavar="NUM",
                      help="Use NUM threads in our thread pool")
    optprs.add_option("--port", dest="port", type="int",
                      default=default_svc_port, metavar="PORT",
                      help="Use PORT for our monitor")
    optprs.add_option("--profile", dest="profile", action="store_true",
                      default=False,
                      help="Run the profiler on main()")
    optprs.add_option("--svcname", dest="svcname", default='sound',
                      metavar="NAME",
                      help="Act as a sound distribution service with NAME")
    ssdlog.addlogopts(optprs)

    (options, args) = optprs.parse_args(sys.argv[1:])

    # Are we debugging this?
    if options.debug:
        import pdb

        pdb.run('main(options, args)')

    # Are we profiling this?
    elif options.profile:
        import profile

        print("%s profile:" % sys.argv[0])
        profile.run('main(options, args)')

    else:
        main(options, args)
